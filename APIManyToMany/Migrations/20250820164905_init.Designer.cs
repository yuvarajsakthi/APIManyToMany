// <auto-generated />
using APIManyToMany.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIManyToMany.Migrations
{
    [DbContext(typeof(HospitalContext))]
    [Migration("20250820164905_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APIManyToMany.Models.Doctor", b =>
                {
                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = "DOC001",
                            HospitalId = "HOS001",
                            Name = "Dr. Smith",
                            Specialization = "Cardiology"
                        },
                        new
                        {
                            DoctorId = "DOC002",
                            HospitalId = "HOS001",
                            Name = "Dr. John",
                            Specialization = "Neurology"
                        },
                        new
                        {
                            DoctorId = "DOC003",
                            HospitalId = "HOS002",
                            Name = "Dr. Emma",
                            Specialization = "Pediatrics"
                        });
                });

            modelBuilder.Entity("APIManyToMany.Models.Hospital", b =>
                {
                    b.Property<string>("HospitalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HospitalId");

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            HospitalId = "HOS001",
                            Name = "City Hospital"
                        },
                        new
                        {
                            HospitalId = "HOS002",
                            Name = "Green Valley Hospital"
                        });
                });

            modelBuilder.Entity("APIManyToMany.Models.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = "PAT001",
                            HospitalId = "HOS001",
                            Name = "Alice"
                        },
                        new
                        {
                            PatientId = "PAT002",
                            HospitalId = "HOS001",
                            Name = "Bob"
                        },
                        new
                        {
                            PatientId = "PAT003",
                            HospitalId = "HOS002",
                            Name = "Charlie"
                        });
                });

            modelBuilder.Entity("APIManyToMany.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = "R001",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = "R002",
                            RoleName = "Doctor"
                        },
                        new
                        {
                            RoleId = "R003",
                            RoleName = "Patient"
                        });
                });

            modelBuilder.Entity("APIManyToMany.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "U001",
                            Email = "admin@hospital.com",
                            PasswordHash = "hashed123",
                            RoleId = "R001",
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            UserId = "U002",
                            Email = "doctor@hospital.com",
                            PasswordHash = "hashed456",
                            RoleId = "R002",
                            UserName = "DrJohn"
                        },
                        new
                        {
                            UserId = "U003",
                            Email = "patient@hospital.com",
                            PasswordHash = "hashed789",
                            RoleId = "R003",
                            UserName = "PatientMary"
                        });
                });

            modelBuilder.Entity("DoctorPatients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorPatients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = "DOC001",
                            PatientId = "PAT001"
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = "DOC001",
                            PatientId = "PAT002"
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = "DOC002",
                            PatientId = "PAT003"
                        });
                });

            modelBuilder.Entity("APIManyToMany.Models.Doctor", b =>
                {
                    b.HasOne("APIManyToMany.Models.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("APIManyToMany.Models.Patient", b =>
                {
                    b.HasOne("APIManyToMany.Models.Hospital", "Hospital")
                        .WithMany("Patients")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("APIManyToMany.Models.User", b =>
                {
                    b.HasOne("APIManyToMany.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DoctorPatients", b =>
                {
                    b.HasOne("APIManyToMany.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APIManyToMany.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("APIManyToMany.Models.Hospital", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("APIManyToMany.Models.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
